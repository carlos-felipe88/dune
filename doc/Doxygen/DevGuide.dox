/*!
  @page DevGuide Developer's Guide

  @section VCS Version Control System

  DUNE's repository is hosted using Git. You should learn to use the
  Git client (or any other available front-end), studying the
  advantages and limitations of the system before compromising any
  part of the repository. A good Git book is available at
  http://git-scm.com/book

  @li Do not commit compiled files to the source tree. Exceptions to
      this rule are files supplied by third parties that cannot be easily
      compiled from source;

  @li Commit only the files that you have changed. Resist the temptation
      of commiting an entire directory, hoping for the best to happen;

  @li Commit changes with caution and conscience. Furthermore do not make
      any commits that you know will render the project in an uncompilable
      state;

  @li Never keep files checked out for long periods;

  @li Document every commit meaningfully;

  @li Always update your working copy before starting work.

  @section FilesDirectories Files and Directories

  File names are made of a base name and an optional period and
  suffix. The base name should be a noun, in mixed case with the first
  letter of each internal word capitalized. It should also reflect the
  name of the class or module implemented. The following suffixes are
  mandatory:

  @li C source file names must end in <em>.c</em>

  @li C included header file names must end in <em>.h</em>

  @li C++ source file names must end in <em>.cpp</em>

  @li C++ included header file names must end in <em>.hpp</em>

  @li Bourne/BASH shell scripts must end in <em>.sh</em>

  @li CMake scripts, with the exception of <em>CMakeLists.txt</em>, must
    end in <em>.cmake</em>

  @section CxxCode C++ Code

  The language of choice for writing code and documentation is English
  and you should not use other languages.

  Do not use "underhanded names" (ones that begin with an underscore),
  this convention is reserved to the compiler and standard library
  implementations.

  Class and structures names should be nouns, in mixed case with the
  first letter of each internal word capitalized. Try to keep your
  class names simple and descriptive. Use whole words. Avoid acronyms
  and abbreviations, unless the abbreviation is much more widely used
  than the long form, such as UDP or CAN. (eg UDPSocket).

  Functions and member functions should be verbs, in mixed case with
  the first letter lowercase and the first letter of each internal
  word capitalized. (eg dumpRegisters).

  Variable names should be short yet meaningful. All characters should
  be lowercase with underscores separating words (eg. dry_run). The
  choice of a variable name should be mnemonic, that is, designed to
  indicate to the casual observer the intent of its use. One-character
  variable names should be avoided except for temporary "throwaway"
  variables. Common names for temporary variables are i, j, k, m, and
  n for integers; c, d, and e for characters.

  Member variables should be prefixed with "m_" (eg. m_handle) and
  constant variables should be prefixed with "c_" (eg. c_max_size).
  The names of preprocessor constants and macros should be all
  uppercase with words separated by underscores (eg. MAX_BUFFER_SIZE).
  Indentation is performed using the ASCII space character and never
  with ASCII horizontal tabs.  Each source file must start with the
  following preamble, with one author per line and an optional
  sentence describing his/her work in the file. The blank line after
  the comment box is mandatory.

  @code
  //***************************************************************************
  // Copyright (C) 2007-2013 Laboratório de Sistemas e Tecnologia Subaquática *
  // Departamento de Engenharia Electrotécnica e de Computadores              *
  // Rua Dr. Roberto Frias, 4200-465 Porto, Portugal                          *
  //***************************************************************************
  // Author: Ricardo Martins                                                  *
  // Author: Eduardo Marques (Microsoft Windows Port)                         *
  //***************************************************************************
  @endcode

  @subsection CppCodeHeaders Headers

  Header files should be self-sufficient. Moreover ensure that each
  header file is compilable standalone, by having it include any
  headers its contents depend upon. Use the script
  programs/scripts/ckheaders.sh to check if the headers available in
  the repository have this property.

  Always write conditional inclusion guards, and remember that the
  guard's macro name should be unique among all source files and
  reflect it's parent directory and namespace. The guard's macro name
  shall end with _HPP_INCLUDED_. Header guards do not count for the
  indentation of preprocessor statements. For example the contents of
  the header file src/DUNE/Hardware/DeviceDriver.hpp should have the
  following layout:

  @code
  //***************************************************************************
  // Copyright (C) 2007-2013 Laboratório de Sistemas e Tecnologia Subaquática *
  // Departamento de Engenharia Electrotécnica e de Computadores              *
  // Rua Dr. Roberto Frias, 4200-465 Porto, Portugal                          *
  //***************************************************************************
  // Author: Ricardo Martins                                                  *
  //***************************************************************************

  #ifndef DUNE_HARDWARE_DEVICE_DRIVER_HPP_INCLUDED_
  #define DUNE_HARDWARE_DEVICE_DRIVER_HPP_INCLUDED_

  ...

  #endif
  @endcode

  @subsection CppCodeFormat Formatting Source Code

  Pointer/reference declarations:
  @code
  char* pointer;
  char& reference;
  void (*function_pointer)(void);
  void (Type:: *pointer_to_member_function)(void);
  @endcode

  Type definitions:
  @code
  typedef char* str_t;
  typedef void (function_t)(void);
  typedef void (Type:: *member_function_t)(void);
  @endcode

  Array initialization:
  @code
  char* members[] = {"one", "two"};
  @endcode

  Multiline array initialization:
  @code
  char* members[] =
  {
    "one",
    "two",
    "three"
  };
  @endcode

  C-Style casts:
  @code
  n = (char*)var;
  x = (char*)&y;
  @endcode

  Function declaration:
  @code
  static char*
  function(char* s1, char* s2);
  @endcode

  Function definition:
  @code
  char*
  function(char* s1, char* s2)
  {
    function-body;
  }
  @endcode

  Function call:
  @code
  n = function(str0, str1);
  @endcode

  Single line if statement:
  @code
  if (if-condition)
    if-line;
  else if (else-if-condition)
    else-if-line;
  else
    else-line;
  @endcode

  Multiline if statement:
  @code
  if (condition)
  {
    if-block;
  }
  else
  {
    else-block;
  }
  @endcode

  Single line while statement:
  @code
  while (condition)
    while-line;
  @endcode

  Multiline while statement:
  @code
  while (condition)
  {
    while-block;
  }
  @endcode

  Single line for statement:
  @code
  for (initialization; stop-condition; increment)
    for-line;
  @endcode

  Multiline for statement:
  @code
  for (initialization; stop-condition; increment)
  {
    for-block;
  }
  @endcode

  Single line do while statement:
  @code
  do
    do-while-line;
  while (condition);
  @endcode

  Multiline line do while statement:
  @code
  do
  {
    do-while-line;
  }
  while (condition);
  @endcode

  Try/catch statement:
  @code
  try
  {
    try-block;
  }
  catch (variable)
  {
    catch-block;
  }
  @endcode

  Switch statement:
  @code
  switch (variable)
  {
    case A:
      a-statement;
      break;
    case B:
      b-statement;
      break;
    default:
      default-statement;
      break;
  }
  @endcode

  Class declaration:
  @code
  class Example
  {
  public:
    public-block;

  protected:
    public-block;

  private:
    public-block;
  };
  @endcode

  Namespace declaration:
  @code
  namespace DUNE
  {
    namespace-contents;
  }
  @endcode

  Preprocessor conditional statement:
  @code
  #if defined(MACRO)
  #  define MACRO_DEF
  #else
  #  define MACRO_UND
  #endif
  @endcode

  Preprocessor header inclusion:
  @code
  // DUNE headers.
  #include <DUNE/Config.hpp>
  #include <DUNE/Concurrency/Initializer.hpp>

  // POSIX headers.
  #if defined(DUNE_SYS_HAS_PTHREAD_H)
  #  include <pthread.h>
  #endif
  @endcode

  @section BuildInstructions Build Instructions

  Required Software:

  @li CMake v2.6.0 or greater.
  @li GNU Make or other POSIX Make.
  @li ISO C++ 98 compliant compiler.

  Optional Software:

  @li Python interpreter: used to (re)generate IMC source files
  @li Doxygen: used to generate documentation

  @subsection Instructions Instructions

  DUNE uses CMake as its building system, the only supported build
  method is to configure and compile the source in a dedicated
  directory.

  Creating the build tree
  @verbatim
  $ mkdir dune-build
  @endverbatim

  Configuring default build system
  @verbatim
  $ cd dune-build
  $ cmake PATH_TO_DUNE
  @endverbatim

  Configuring build system for cross compilation
  @verbatim
  $ cd dune-build
  $ cmake -DCROSS=PATH_TO_CROSS_COMPILER PATH_TO_DUNE
  @endverbatim

  Building (systems with GNU Make)
  @verbatim
  $ make
  @endverbatim

  Recreating automatically generated IMC source files

  @verbatim
  $ make imc
  @endverbatim


  @section Eclipse Quick Startup Guide (Eclipse IDE and Ubuntu Linux)

  @subsection EclipseInstall Install required software

  Before running this command make sure you activate software
  repository for Ubuntu partners (required for sun-java-jdk). For this
  edit the software repositories from within synaptic or settings
  panel.

  @verbatim
  $ sudo apt-get install subversion cmake sun-java-sdk eclipse-cdt
  @endverbatim

  @subsection EclipseCO Checkout DUNE

  Create a directory for the sources and checkout latest version from
  SVN repository.

  @verbatim
  $ mkdir dune
  $ cd dune
  $ svn co https://whale.fe.up.pt/svn/dune/trunk
  @endverbatim

  @subsection EclipseCompile Compile and test DUNE

  Run cmake in a separate "build" folder. Unix makefiles will be
  generated for you machine, so that from this build folder you can
  compile DUNE using make. Also an eclipse-compatible project is
  created in the build folder.

  After correct compilation, you can run a DUNE simulator by running
  the command "./dune -c <config> -p <profile>"

  @verbatim
  $ cd ~/dune/
  $ mkdir build
  $ cd build
  $ cmake -G "Eclipse CDT4 – Unix Makefiles" ../trunk
  $ make
  $ ./dune -c lauv-seacon-1 -p Simulation
  @endverbatim

  @subsection EclipseUse Use eclipse to develop for DUNE
  Start the eclipse IDE and import "An existing project into
  workspace". Select the folder ~/dune/build.  In eclipse, right-click
  the project and select "build project" whenever you want to
  recompile.

*/
